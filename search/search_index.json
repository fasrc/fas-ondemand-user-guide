{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to FAS OnDemand With FAS OnDemand, you can: Run Jupyter Notebooks Run Rstudio Server Run Remote Desktop Browse, edit, and upload files Open a terminal connection to a login node To login to FAS OnDemand: Visit your Canvas course In the course navigation, click on FAS OnDemand A new window will open and you will be logged into the portal","title":"Home"},{"location":"#welcome-to-fas-ondemand","text":"With FAS OnDemand, you can: Run Jupyter Notebooks Run Rstudio Server Run Remote Desktop Browse, edit, and upload files Open a terminal connection to a login node To login to FAS OnDemand: Visit your Canvas course In the course navigation, click on FAS OnDemand A new window will open and you will be logged into the portal","title":"Welcome to FAS OnDemand"},{"location":"additionalresources/","text":"Additional Resources Refer to our main documentation to learn more about: Virtual Desktop (VDI) through Open OnDemand Running jobs on the cluster Controlling jobs on the cluster and fairshare Accessing scientific software in your jobs","title":"Additional Resources"},{"location":"additionalresources/#additional-resources","text":"Refer to our main documentation to learn more about: Virtual Desktop (VDI) through Open OnDemand Running jobs on the cluster Controlling jobs on the cluster and fairshare Accessing scientific software in your jobs","title":"Additional Resources"},{"location":"firstlaunch/","text":"First time launching OnDemand When you launch OnDemand for the first time in a course, even if you've used the platform before in a different course, the system has to set up a new account for you. It's best to make sure that your account is created before you intend to use OnDemand, since it can take some time for new accounts to be fully operational and it is possible for you to encounter errors accessing OnDemand apps until that process is complete. After clicking the link to launch the tool in your Canvas site, you'll see a screen with a message that says \"Building Your User Account...\", like this: After a short delay, the status will change to \"Complete\", like this: That will redirect you to the OnDemand homepage when your account has been successfully created. You will likely have a different selection of apps, but the home screen will look like this:","title":"First time launch"},{"location":"firstlaunch/#first-time-launching-ondemand","text":"When you launch OnDemand for the first time in a course, even if you've used the platform before in a different course, the system has to set up a new account for you. It's best to make sure that your account is created before you intend to use OnDemand, since it can take some time for new accounts to be fully operational and it is possible for you to encounter errors accessing OnDemand apps until that process is complete. After clicking the link to launch the tool in your Canvas site, you'll see a screen with a message that says \"Building Your User Account...\", like this: After a short delay, the status will change to \"Complete\", like this: That will redirect you to the OnDemand homepage when your account has been successfully created. You will likely have a different selection of apps, but the home screen will look like this:","title":"First time launching OnDemand"},{"location":"help/","text":"Getting help For general assistance, write to ithelp@harvard.edu . Since this is a general help address, please mention FAS OnDemand in the subject, and include a link to the course for which you need help.","title":"Getting help"},{"location":"help/#getting-help","text":"For general assistance, write to ithelp@harvard.edu . Since this is a general help address, please mention FAS OnDemand in the subject, and include a link to the course for which you need help.","title":"Getting help"},{"location":"jupyter/","text":"Jupyter Notebooks Getting started with Jupyter Notebooks On the menu bar, click Interactive Apps and select the Jupyter app for your class. For example, if your class is CS109a, select Jupyter Notebook - CS109a . You can also select your app from the dashboard page. On the following page, in Allocated Time , enter the approximate number of hours for which you would like to run your server. For example, for a 4 hour session, enter 04:00:00 . Afterwards, click Launch . On the page that follows, click Connect to Jupyter . A new browser tab containing the Jupyter notebooks interface will open. Select the jupyter kernel you want. For example, to start a notebook with the Python 3 jupyter kernel, click New then Python 3 . How to install python packages It is probable that the package you need is already pre-installed and that you can import it in your notebooks with import packagename . If that is not the case, below are the steps to install a python package. From the jupyter notebooks interface, click New then Terminal . A terminal will open in a new browser tab. In the Terminal, run pip install --user packagename , replacing packagename with the python package you intend to install. E.g:","title":"Jupyter Notebooks"},{"location":"jupyter/#jupyter-notebooks","text":"","title":"Jupyter Notebooks"},{"location":"jupyter/#getting-started-with-jupyter-notebooks","text":"On the menu bar, click Interactive Apps and select the Jupyter app for your class. For example, if your class is CS109a, select Jupyter Notebook - CS109a . You can also select your app from the dashboard page. On the following page, in Allocated Time , enter the approximate number of hours for which you would like to run your server. For example, for a 4 hour session, enter 04:00:00 . Afterwards, click Launch . On the page that follows, click Connect to Jupyter . A new browser tab containing the Jupyter notebooks interface will open. Select the jupyter kernel you want. For example, to start a notebook with the Python 3 jupyter kernel, click New then Python 3 .","title":"Getting started with Jupyter Notebooks"},{"location":"jupyter/#how-to-install-python-packages","text":"It is probable that the package you need is already pre-installed and that you can import it in your notebooks with import packagename . If that is not the case, below are the steps to install a python package. From the jupyter notebooks interface, click New then Terminal . A terminal will open in a new browser tab. In the Terminal, run pip install --user packagename , replacing packagename with the python package you intend to install. E.g:","title":"How to install python packages"},{"location":"rstudio/","text":"Rstudio Server Getting started with Rstudio On the menu bar, click Interactive Apps and select RStudio app for your class. For example, if your class is Gov 50, select RStudio Server - Gov50 . Click Launch . On the page that follows, click Connect to Rstudio Server . A new browser tab with Rstudio will open. Working with Rstudio How to restart Rstudio Before you restart, make sure any programs and data files that you want to preserve have been saved to your home directory. To restart your Rstudio server completely, follow these steps: Navigate to My Interactive Sessions in FAS OnDemand. Click Delete to remove your Rstudio server. Click Confirm . Select the Rstudio app and launch a new server. How to install R packages Rstudio server comes preinstalled with most if not all packages required for your class, so if you can't find the package in the list of installed packages, make sure that you are connecting to the correct Rstudio app for your class before proceeding (e.g. Rstudio Server - Gov50 ). In the event that you need to install additional R packages, you can install from CRAN or github as follows: - CRAN: install.packages('packagename') - Github: remotes::install_github('user/packagename') For example, to install the shiny package, run install.packages('shiny') : The packages will be installed to the R folder of your home directory. How to connect Rstudio to github with HTTPS Follow the steps below to connect Rstudio to github with HTTPS: Open a new browser tab and visit https://github.com/settings/tokens . You may be prompted to login to your github account. Click Generate new token . Enter a Note (e.g. your course name), select repo scope(full control of private repositories), and then click Generate token . Copy this token or PAT to your clipboard (click the clipboard icon). In Rstudio, define an environment variable in .Renviron named GITHUB_PAT by following these steps: a. Enter the following in your Console : r library(usethis) edit_r_environ() b. Add the GITHUB_PAT environment variable to .Renviron : GITHUB_PAT=PasteYourTokenHere c. Save .Renviron and then close it. In Rstudio, set your git credentials. Enter the following in your Console , and when prompted, enter your PAT for the password. library(credentials) credential_helper_set(\"store\", global = TRUE) git_credential_ask('https://github.com') Note : this will update .gitconfig and .git-credentials in your home directory. Now you should be able to Create a Project from Version Control in RStudio using the HTTPS URL from github as the Repository URL . How to connect Rstudio to github with SSH Follow the steps below to connect Rstudio to github with SSH: Connect to Rstudio and navigate to Tools > Global Options . Select the options for Git/SVN . Click View public key . Note: this key is automatically created for you when you first login to FAS OnDemand. Copy the key to your clipboard. Everything in the box needs to be copied, starting with ssh-rsa ... . Open a new browser tab and visit https://github.com/settings/keys . You may be prompted to login to your github account. Click New SSH key . For Title , enter a descriptive name (e.g. OnDemand GOV50 ). For Key , paste the public key that you previously copied to your clipboard (see steps 3-4). Then click Add SSH key . Now you should be able to Create a Project from Version Control in RStudio using the SSH URL from github as the Repository URL . Troubleshooting Rstudio Rstudio will not start If Rstudio will not start and you get an error message like this: Wait 2-3 minutes and try to re-launch the application. This may happen the very first time you login to FAS OnDemand and your account hasn't been fully provisioned yet. If you continue to get this error or otherwise cannot start Rstudio, please contact ithelp@harvard.edu for assistance. Problem logging in to Rstudio f you have been logged out of Rstudio (because of inactivity, for example) then you may see a login screen like this: To log back in to your Rstudio session, close that login page and then follow these steps: Navigate to My Interactive Sessions in FAS OnDemand. Re-connect to your running Rstudio session:","title":"Rstudio Server"},{"location":"rstudio/#rstudio-server","text":"","title":"Rstudio Server"},{"location":"rstudio/#getting-started-with-rstudio","text":"On the menu bar, click Interactive Apps and select RStudio app for your class. For example, if your class is Gov 50, select RStudio Server - Gov50 . Click Launch . On the page that follows, click Connect to Rstudio Server . A new browser tab with Rstudio will open.","title":"Getting started with Rstudio"},{"location":"rstudio/#working-with-rstudio","text":"","title":"Working with Rstudio"},{"location":"rstudio/#how-to-restart-rstudio","text":"Before you restart, make sure any programs and data files that you want to preserve have been saved to your home directory. To restart your Rstudio server completely, follow these steps: Navigate to My Interactive Sessions in FAS OnDemand. Click Delete to remove your Rstudio server. Click Confirm . Select the Rstudio app and launch a new server.","title":"How to restart Rstudio"},{"location":"rstudio/#how-to-install-r-packages","text":"Rstudio server comes preinstalled with most if not all packages required for your class, so if you can't find the package in the list of installed packages, make sure that you are connecting to the correct Rstudio app for your class before proceeding (e.g. Rstudio Server - Gov50 ). In the event that you need to install additional R packages, you can install from CRAN or github as follows: - CRAN: install.packages('packagename') - Github: remotes::install_github('user/packagename') For example, to install the shiny package, run install.packages('shiny') : The packages will be installed to the R folder of your home directory.","title":"How to install R packages"},{"location":"rstudio/#how-to-connect-rstudio-to-github-with-https","text":"Follow the steps below to connect Rstudio to github with HTTPS: Open a new browser tab and visit https://github.com/settings/tokens . You may be prompted to login to your github account. Click Generate new token . Enter a Note (e.g. your course name), select repo scope(full control of private repositories), and then click Generate token . Copy this token or PAT to your clipboard (click the clipboard icon). In Rstudio, define an environment variable in .Renviron named GITHUB_PAT by following these steps: a. Enter the following in your Console : r library(usethis) edit_r_environ() b. Add the GITHUB_PAT environment variable to .Renviron : GITHUB_PAT=PasteYourTokenHere c. Save .Renviron and then close it. In Rstudio, set your git credentials. Enter the following in your Console , and when prompted, enter your PAT for the password. library(credentials) credential_helper_set(\"store\", global = TRUE) git_credential_ask('https://github.com') Note : this will update .gitconfig and .git-credentials in your home directory. Now you should be able to Create a Project from Version Control in RStudio using the HTTPS URL from github as the Repository URL .","title":"How to connect Rstudio to github with HTTPS"},{"location":"rstudio/#how-to-connect-rstudio-to-github-with-ssh","text":"Follow the steps below to connect Rstudio to github with SSH: Connect to Rstudio and navigate to Tools > Global Options . Select the options for Git/SVN . Click View public key . Note: this key is automatically created for you when you first login to FAS OnDemand. Copy the key to your clipboard. Everything in the box needs to be copied, starting with ssh-rsa ... . Open a new browser tab and visit https://github.com/settings/keys . You may be prompted to login to your github account. Click New SSH key . For Title , enter a descriptive name (e.g. OnDemand GOV50 ). For Key , paste the public key that you previously copied to your clipboard (see steps 3-4). Then click Add SSH key . Now you should be able to Create a Project from Version Control in RStudio using the SSH URL from github as the Repository URL .","title":"How to connect Rstudio to github with SSH"},{"location":"rstudio/#troubleshooting-rstudio","text":"","title":"Troubleshooting Rstudio"},{"location":"rstudio/#rstudio-will-not-start","text":"If Rstudio will not start and you get an error message like this: Wait 2-3 minutes and try to re-launch the application. This may happen the very first time you login to FAS OnDemand and your account hasn't been fully provisioned yet. If you continue to get this error or otherwise cannot start Rstudio, please contact ithelp@harvard.edu for assistance.","title":"Rstudio will not start"},{"location":"rstudio/#problem-logging-in-to-rstudio","text":"f you have been logged out of Rstudio (because of inactivity, for example) then you may see a login screen like this: To log back in to your Rstudio session, close that login page and then follow these steps: Navigate to My Interactive Sessions in FAS OnDemand. Re-connect to your running Rstudio session:","title":"Problem logging in to Rstudio"},{"location":"status/","text":"System status For the latest information on the status of the system visit: https://status.rc.fas.harvard.edu/ For information on the monthly planned maintenance window: https://www.rc.fas.harvard.edu/maintenance","title":"System Status"},{"location":"status/#system-status","text":"For the latest information on the status of the system visit: https://status.rc.fas.harvard.edu/ For information on the monthly planned maintenance window: https://www.rc.fas.harvard.edu/maintenance","title":"System status"},{"location":"storage/","text":"Storage When connecting to RStudio or to Jupyter Notebooks, there will be two storage folders available to you by default: scratch_folder and shared_data . You can also store data in your home directory, outside of these folders. Each of these storage locations works a bit differently, so here's an overview to help you decide which storage option to use at any given time. Tool-independent storage access If you need to access or manipulate files in OnDemand, but don't need the tools of any of the programming environments, you can use the \"Home Directory\" tool in OnDemand. You can find it in the top right corner of the initial OnDemand home screen, as pictured below. In this example, you can see the shared folder, the scratch folder, and \"sample.ipynb\", which is outside of those folders in the example user's home folder. Home directory Outside of the scratch_folder and shared_data folders, you can create your own folders and save your own files. Data stored outside of these folders is associated with your OnDemand user account, so it's persistent and tied to your account, but limited in size. By default, there's 20GB allocated to this directory per user, although instructors can request increased storage allocation where needed. Your home folder is also not symlinked, which can be important for some applications. Shared folder The shared folder is accessible to everyone in a course with OnDemand installed. By default, the folder is read-only to students, so that only instructors and TFs can write to it. Instructors and TFs can create subfolders in that shared folder with more permissive settings, allowing students to write to certain shared folders when appropriate. These permissions can be updated through the OnDemand termminal app using normal unix file permission commands chmod and chown . If you'd like assistance adjusting folder permissions, please write to atg@fas.harvard.edu or fasondemand@rc.fas.harvard.edu . Scratch folder The scratch folder provides high-capacity storage symlinked to your home directory. The storage capacity for both scratch and shared folders is shared at the course level, and is larger than most courses will use (10TB). Scratch folders are unique for each OnDemand account, so while the storage capacity is shared, the folder contents are not. This storage is suitable for large files, but if an entire class will be using very large, unique datasets that may run into the storage limit, please reach out to atg@fas.harvard.edu or fasondemand@rc.fas.harvard.edu .","title":"Storage"},{"location":"storage/#storage","text":"When connecting to RStudio or to Jupyter Notebooks, there will be two storage folders available to you by default: scratch_folder and shared_data . You can also store data in your home directory, outside of these folders. Each of these storage locations works a bit differently, so here's an overview to help you decide which storage option to use at any given time.","title":"Storage"},{"location":"storage/#tool-independent-storage-access","text":"If you need to access or manipulate files in OnDemand, but don't need the tools of any of the programming environments, you can use the \"Home Directory\" tool in OnDemand. You can find it in the top right corner of the initial OnDemand home screen, as pictured below. In this example, you can see the shared folder, the scratch folder, and \"sample.ipynb\", which is outside of those folders in the example user's home folder.","title":"Tool-independent storage access"},{"location":"storage/#home-directory","text":"Outside of the scratch_folder and shared_data folders, you can create your own folders and save your own files. Data stored outside of these folders is associated with your OnDemand user account, so it's persistent and tied to your account, but limited in size. By default, there's 20GB allocated to this directory per user, although instructors can request increased storage allocation where needed. Your home folder is also not symlinked, which can be important for some applications.","title":"Home directory"},{"location":"storage/#shared-folder","text":"The shared folder is accessible to everyone in a course with OnDemand installed. By default, the folder is read-only to students, so that only instructors and TFs can write to it. Instructors and TFs can create subfolders in that shared folder with more permissive settings, allowing students to write to certain shared folders when appropriate. These permissions can be updated through the OnDemand termminal app using normal unix file permission commands chmod and chown . If you'd like assistance adjusting folder permissions, please write to atg@fas.harvard.edu or fasondemand@rc.fas.harvard.edu .","title":"Shared folder"},{"location":"storage/#scratch-folder","text":"The scratch folder provides high-capacity storage symlinked to your home directory. The storage capacity for both scratch and shared folders is shared at the course level, and is larger than most courses will use (10TB). Scratch folders are unique for each OnDemand account, so while the storage capacity is shared, the folder contents are not. This storage is suitable for large files, but if an entire class will be using very large, unique datasets that may run into the storage limit, please reach out to atg@fas.harvard.edu or fasondemand@rc.fas.harvard.edu .","title":"Scratch folder"},{"location":"tour/","text":"A brief tour of FAS OnDemand When you first launch FAS OnDemand from your Canvas course, you will land on a dashboard that looks something like this: Interactive Apps : Lists the interactive applications that are set up for your class. To start an app, simply click on the icon and follow the prompts to start a new interactive session . Note that you can always access the list of apps from the top navigation bar as well. Tools : Additional tools that are specific to FAS OnDemand to help you manage files, jobs, etc. These are all optional tools. It's possible to do everything you need within the application itself. Home Directory : Your home directory will be mounted automatically by the interactive apps, so any changes you make in the app will be available here, and vice versa. In some cases, it is more convenient to upload/download large files using this tool. Job Composer (advanced): For submitting batch jobs. Most users will not need this. Active Jobs (advanced): For managing compute jobs. Most users will not need this. Shell Access : Your home directory files and configuration can be managed via the command line using this tool. My Interactive Sessions : Lists running applications. Use this to re-connect to an application that was previously started or to stop an application. Help : List of resources to get help.","title":"A brief tour"},{"location":"tour/#a-brief-tour-of-fas-ondemand","text":"When you first launch FAS OnDemand from your Canvas course, you will land on a dashboard that looks something like this: Interactive Apps : Lists the interactive applications that are set up for your class. To start an app, simply click on the icon and follow the prompts to start a new interactive session . Note that you can always access the list of apps from the top navigation bar as well. Tools : Additional tools that are specific to FAS OnDemand to help you manage files, jobs, etc. These are all optional tools. It's possible to do everything you need within the application itself. Home Directory : Your home directory will be mounted automatically by the interactive apps, so any changes you make in the app will be available here, and vice versa. In some cases, it is more convenient to upload/download large files using this tool. Job Composer (advanced): For submitting batch jobs. Most users will not need this. Active Jobs (advanced): For managing compute jobs. Most users will not need this. Shell Access : Your home directory files and configuration can be managed via the command line using this tool. My Interactive Sessions : Lists running applications. Use this to re-connect to an application that was previously started or to stop an application. Help : List of resources to get help.","title":"A brief tour of FAS OnDemand"}]}